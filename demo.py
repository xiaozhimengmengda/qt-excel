# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'excel.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import logging
import pandas as pd
from PyQt5.QtWidgets import QApplication, QMainWindow,QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_excle(object): # Ui类
    def setupUi(self, excle):
        excle.setObjectName("excle")
        excle.resize(1680, 1005)

        self.centralwidget = QtWidgets.QWidget(excle)
        self.centralwidget.setObjectName("centralwidget")

        self.toolButton = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton.setGeometry(QtCore.QRect(310, 40, 61, 24))
        self.toolButton.setObjectName("toolButton")

        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(110, 40, 191, 26))
        self.comboBox.setObjectName("comboBox")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(480, 0, 331, 31))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(105, 91, 1031, 851))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(652, 44, 125, 21))
        self.lineEdit.setStyleSheet("")
        self.lineEdit.setObjectName("lineEdit")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(861, 44, 125, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.find_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.find_pushButton.setGeometry(QtCore.QRect(790, 40, 68, 32))
        self.find_pushButton.setObjectName("find_pushButton")

        self.replace_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.replace_pushButton.setGeometry(QtCore.QRect(1000, 40, 68, 32))
        self.replace_pushButton.setObjectName("replace_pushButton")

        excle.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(excle)
        self.statusbar.setObjectName("statusbar")
        excle.setStatusBar(self.statusbar)

        self.retranslateUi(excle)
        QtCore.QMetaObject.connectSlotsByName(excle)

    def retranslateUi(self, excle):
        _translate = QtCore.QCoreApplication.translate
        excle.setWindowTitle(_translate("excle", "MainWindow"))
        self.toolButton.setText(_translate("excle", "浏览"))
        self.label.setText(_translate("excle", "excle内容查找和替换"))
        self.find_pushButton.setText(_translate("excle", "查找"))
        self.replace_pushButton.setText(_translate("excle", "替换"))


class Main(QMainWindow,Ui_excle): # 功能类
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        # 浏览文件的槽和信号
        self.toolButton.clicked.connect(self.open_files_list)

        # 表格单击的槽和信号
        self.tableWidget.doubleClicked.connect(self.clicked)

        # 查找的槽和信号
        self.find_pushButton.clicked.connect(self.find)
        # 替换的槽和信号
        self.replace_pushButton.clicked.connect(self.replace)

        self.find_items = []

    def open_files_list(self):
        excel_path, _, = QtWidgets.QFileDialog.getOpenFileName(self,'选择文件','.','Excel files(*.xlsx ,*.xls)')
        if excel_path:
            # 设置路径
            self.comboBox.setPlaceholderText(excel_path)
            # pandas读取excel
            df = pd.read_excel(excel_path)
            # 获取最大行，最大列
            rows = df.shape[0]
            # 最大列
            cols = df.shape[1]
            # 读取表头文件
            headers = df.columns.values.tolist()
            self.tableWidget.setColumnCount(cols)
            self.tableWidget.setRowCount(rows)
            # 设置表头
            self.tableWidget.setHorizontalHeaderLabels(headers)
            # 获取除表头以外的每行数据
            for row, datas in enumerate(df.values):
                self.set_cow_data_excel(row, datas)
        else:
            return

    def set_cow_data_excel(self, rows, datas):
        # 设置表单内容
        for cow, data in enumerate(datas):
            self.tableWidget.setItem(rows, cow, QtWidgets.QTableWidgetItem(f"{data}"))# 设置j行0列的内容为Value

    def clicked(self):
        # 获取当前行Index
        row_index = self.tableWidget.currentIndex().row()
        # 获取当前列Index
        cow_index = self.tableWidget.currentColumn()
        item = self.tableWidget.item(row_index, cow_index).text()
        # item(行,列), 获取当前行
        QMessageBox.information(self, '信息提示对话框',f'{item}！')

    def find(self):
        self.clear_style()
        text = self.lineEdit.text()
        items = []
        # rows = self.tableWidget.rowCount()
        # cows = self.tableWidget.columnCount()
        # for row in range(rows):
        #     for cow in range(cows):
        #         flag = self.tableWidget.item(row, cow)
        #         if text == flag.text():
        #             name = QtWidgets.QTableWidgetItem(f"{text}")
        #             name.setForeground(QtGui.QBrush(QtGui.QColor(255,0,0)))  #设置字体的其他颜色
        #             self.tableWidget.setItem(row, cow, name)
        if text:
            items = self.tableWidget.findItems(text, QtCore.Qt.MatchStartsWith)
        if len(items) > 0:
            self.find_items = items
            for item in items:
                self.set_style(item)
            self.message(f"找到 {len(self.find_items)} 条 ")

    def set_style(self, item):
            item.setBackground(QtGui.QBrush(QtGui.QColor(0,255,0)))  # 设置背景色为绿色
            item.setForeground(QtGui.QBrush(QtGui.QColor(255,0,0)))  # 设置内容为红色
            # row=item.row()
            # #定位到行

            # self.tableWidget.verticalScrollBar().setSliderPosition(row)

    def replace(self):
        if self.find_items:
            replace_text = self.lineEdit_2.text()
            for item in self.find_items:
                cell = QtWidgets.QTableWidgetItem(f"{replace_text}")
                cell.setBackground(QtGui.QBrush(QtGui.QColor(0,255,0)))
                cell.setForeground(QtGui.QBrush(QtGui.QColor(255,0,0)))
                self.tableWidget.setItem(item.row(), item.column(), cell)
            self.message(f"{len(self.find_items)} 条 替换成功")

    def clear_style(self):
        try:
            if self.find_items:
                for item in self.find_items:
                    self.tableWidget.setItem(item.row(), item.column(), QtWidgets.QTableWidgetItem(f"{item.text()}"))
        except BaseException as e:
            pass

    def message(self, name):
        # 提示弹窗
        QMessageBox.information(self, '信息提示对话框',f'{name}!')


if __name__ == "__main__":
    # 固定的，PyQt5程序都需要QApplication对象。sys.argv是命令行参数列表，确保程序可以双击运行
    app = QApplication(sys.argv)
    # 初始化
    myWin = Main()

    # 将窗口控件显示在屏幕上
    myWin.show()
    # 程序运行，sys.exit方法确保程序完整退出。
    sys.exit(app.exec_())

